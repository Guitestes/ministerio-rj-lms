[
  {
    "policy_name": "Alunos podem inserir seus próprios trabalhos",
    "table_name": "academic_works",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(auth.uid() = user_id)"
  },
  {
    "policy_name": "Alunos podem ver seus próprios trabalhos",
    "table_name": "academic_works",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Instrutores podem ver trabalhos de suas turmas",
    "table_name": "academic_works",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM classes c\n  WHERE ((c.id = academic_works.class_id) AND (c.instructor_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users",
    "table_name": "admin_requests",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Admins can delete requests",
    "table_name": "administrative_requests",
    "schema_name": "public",
    "is_permissive": true,
    "command": "d",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can update requests",
    "table_name": "administrative_requests",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "is_admin()",
    "with_check_expression": "is_admin()"
  },
  {
    "policy_name": "Authenticated users can create requests",
    "table_name": "administrative_requests",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "((auth.uid() IS NOT NULL) AND (auth.uid() = user_id))"
  },
  {
    "policy_name": "Users can view own requests",
    "table_name": "administrative_requests",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "((auth.uid() IS NOT NULL) AND ((auth.uid() = user_id) OR is_admin()))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable read access for authenticated users",
    "table_name": "audiovisual_materials",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all calendar events",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Anyone can view calendar events",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Policy with table joins",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT auth.uid() AS uid) IN ( SELECT members.user_id\n   FROM members\n  WHERE (members.team_id = calendar_events.id)))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can manage class events",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM (classes c\n     JOIN profiles p ON ((c.instructor_id = p.id)))\n  WHERE ((c.id = calendar_events.class_id) AND (p.id = auth.uid()) AND (p.role = ANY (ARRAY['professor'::text, 'admin'::text])))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Users can view events of enrolled classes",
    "table_name": "calendar_events",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM enrollments e\n  WHERE ((e.user_id = auth.uid()) AND (e.class_id = calendar_events.class_id))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can manage campaign metrics",
    "table_name": "campaign_metrics",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can view all classes",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Professors can create classes for their courses",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = classes.course_id) AND (courses.professor_id = auth.uid()))))"
  },
  {
    "policy_name": "Professors can view their course classes",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = classes.course_id) AND (courses.professor_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Students can view enrolled classes",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM enrollments\n  WHERE ((enrollments.class_id = classes.id) AND (enrollments.user_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "allow_authenticated_users_view_classes",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "allow_public_view_classes",
    "table_name": "classes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all contracts",
    "table_name": "contracts",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all courses",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Policy with table joins",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT auth.uid() AS uid) IN ( SELECT members.user_id\n   FROM members\n  WHERE (members.team_id = courses.id)))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can create courses",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "((auth.uid() = professor_id) AND (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = ANY (ARRAY['admin'::text, 'professor'::text]))))))"
  },
  {
    "policy_name": "Professors can update their own courses",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(auth.uid() = professor_id)",
    "with_check_expression": "(auth.uid() = professor_id)"
  },
  {
    "policy_name": "allow_public_view_courses",
    "table_name": "courses",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all taught courses",
    "table_name": "courses_taught",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can view their own taught courses",
    "table_name": "courses_taught",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = professor_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable all for admins",
    "table_name": "crm_contacts",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": "is_admin(auth.uid())"
  },
  {
    "policy_name": "Admins can manage custom forms",
    "table_name": "custom_forms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can create custom forms",
    "table_name": "custom_forms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = ANY (ARRAY['admin'::text, 'professor'::text])))))"
  },
  {
    "policy_name": "Public can view custom forms",
    "table_name": "custom_forms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "allow_form_read",
    "table_name": "custom_forms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage customer segments",
    "table_name": "customer_segments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all documents",
    "table_name": "documents",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin()",
    "with_check_expression": "is_admin()"
  },
  {
    "policy_name": "Users can create their own documents",
    "table_name": "documents",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(auth.uid() = user_id)"
  },
  {
    "policy_name": "Users can view their own documents",
    "table_name": "documents",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage email campaigns",
    "table_name": "email_campaigns",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage email list contacts",
    "table_name": "email_list_contacts",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can manage email lists",
    "table_name": "email_lists",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can view email metrics",
    "table_name": "email_metrics",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage email settings",
    "table_name": "email_settings",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage email subscribers",
    "table_name": "email_subscribers",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can manage email templates",
    "table_name": "email_templates",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage email tracking",
    "table_name": "email_tracking",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all enrollments",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can view all enrollments",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable delete for users based on user_id",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "d",
    "using_expression": "(( SELECT auth.uid() AS uid) = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable insert for users based on user_id",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(( SELECT auth.uid() AS uid) = user_id)"
  },
  {
    "policy_name": "Policy with table joins",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT auth.uid() AS uid) IN ( SELECT members.user_id\n   FROM members\n  WHERE (members.team_id = enrollments.id)))",
    "with_check_expression": null
  },
  {
    "policy_name": "Users can create their own enrollments",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(auth.uid() = user_id)"
  },
  {
    "policy_name": "Users can view their own enrollments",
    "table_name": "enrollments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable read for admins",
    "table_name": "financial_data",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all financial transactions",
    "table_name": "financial_transactions",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Users can view their own financial transactions",
    "table_name": "financial_transactions",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(profile_id = auth.uid())",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins podem gerenciar documentos gerais",
    "table_name": "general_documents",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "((auth.jwt() ->> 'user_role'::text) = 'admin'::text)",
    "with_check_expression": "((auth.jwt() ->> 'user_role'::text) = 'admin'::text)"
  },
  {
    "policy_name": "allow_authenticated_users_view_general_documents",
    "table_name": "general_documents",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can manage lead interactions",
    "table_name": "lead_interactions",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can manage leads",
    "table_name": "leads",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all lessons",
    "table_name": "lessons",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can manage lessons in their modules",
    "table_name": "lessons",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM (modules m\n     JOIN courses c ON ((c.id = m.course_id)))\n  WHERE ((m.id = lessons.module_id) AND (c.professor_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "allow_public_view_lessons",
    "table_name": "lessons",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admin can manage marketing campaigns",
    "table_name": "marketing_campaigns",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable delete for users based on user_id",
    "table_name": "members",
    "schema_name": "public",
    "is_permissive": true,
    "command": "d",
    "using_expression": "(( SELECT auth.uid() AS uid) = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "members",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "members",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "module_prerequisites",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "module_prerequisites",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all modules",
    "table_name": "modules",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "modules",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "modules",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Policy with table joins",
    "table_name": "modules",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT auth.uid() AS uid) IN ( SELECT members.user_id\n   FROM members\n  WHERE (members.team_id = modules.id)))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can manage their course modules",
    "table_name": "modules",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM courses\n  WHERE ((courses.id = modules.course_id) AND (courses.professor_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "allow_public_view_modules",
    "table_name": "modules",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage newsletter templates",
    "table_name": "newsletter_templates",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can see all notifications",
    "table_name": "notifications",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Users can manage their own notifications",
    "table_name": "notifications",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(auth.uid() = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all price tables",
    "table_name": "price_tables",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Service providers can view their own price tables",
    "table_name": "price_tables",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM service_providers\n  WHERE ((service_providers.id = price_tables.provider_id) AND (service_providers.user_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all professor details",
    "table_name": "professor_details",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can update their own details",
    "table_name": "professor_details",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(auth.uid() = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can view their own details",
    "table_name": "professor_details",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = user_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all professor payments",
    "table_name": "professor_payments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can view their own payments",
    "table_name": "professor_payments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = professor_id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all profile scholarships",
    "table_name": "profile_scholarships",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin()",
    "with_check_expression": "is_admin()"
  },
  {
    "policy_name": "Admins can update all profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT (users.raw_user_meta_data ->> 'role'::text)\n   FROM auth.users\n  WHERE (users.id = auth.uid())) = 'admin'::text)",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can view all profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "Authenticated users can view their own profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": null
  },
  {
    "policy_name": "Users can update their own profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": "(auth.uid() = id)"
  },
  {
    "policy_name": "Users can view their own profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": null
  },
  {
    "policy_name": "admin_can_delete_profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "d",
    "using_expression": "is_admin()",
    "with_check_expression": null
  },
  {
    "policy_name": "admin_can_insert_profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "(is_admin() OR (auth.uid() = id))"
  },
  {
    "policy_name": "admin_can_update_profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(is_admin() OR (auth.uid() = id))",
    "with_check_expression": "(is_admin() OR (auth.uid() = id))"
  },
  {
    "policy_name": "admin_can_view_all_profiles",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "(is_admin() OR (auth.uid() = id))",
    "with_check_expression": null
  },
  {
    "policy_name": "basic_profile_access",
    "table_name": "profiles",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": "(auth.uid() = id)"
  },
  {
    "policy_name": "Admins can manage all quizzes",
    "table_name": "quizzes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "quizzes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can manage quizzes in their courses",
    "table_name": "quizzes",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM courses c\n  WHERE ((c.id = quizzes.course_id) AND (c.professor_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all comments",
    "table_name": "request_comments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": "is_admin(auth.uid())"
  },
  {
    "policy_name": "Users can create comments on their accessible requests",
    "table_name": "request_comments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "( SELECT true\n   FROM administrative_requests\n  WHERE (administrative_requests.id = request_comments.request_id))"
  },
  {
    "policy_name": "Users can view comments on their accessible requests",
    "table_name": "request_comments",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "( SELECT true\n   FROM administrative_requests\n  WHERE (administrative_requests.id = request_comments.request_id))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage retention actions",
    "table_name": "retention_actions",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": "is_admin(auth.uid())"
  },
  {
    "policy_name": "Admins can manage all rooms",
    "table_name": "rooms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Anyone can view rooms",
    "table_name": "rooms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "rooms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "rooms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Policy with table joins",
    "table_name": "rooms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT auth.uid() AS uid) IN ( SELECT members.user_id\n   FROM members\n  WHERE (members.team_id = rooms.id)))",
    "with_check_expression": null
  },
  {
    "policy_name": "Professors can manage rooms",
    "table_name": "rooms",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = ANY (ARRAY['professor'::text, 'admin'::text])))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage all scholarships",
    "table_name": "scholarships",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Admins can manage price lists",
    "table_name": "service_price_list",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "is_admin(auth.uid())",
    "with_check_expression": "is_admin(auth.uid())"
  },
  {
    "policy_name": "Admins can manage all service providers",
    "table_name": "service_providers",
    "schema_name": "public",
    "is_permissive": true,
    "command": "*",
    "using_expression": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
    "with_check_expression": null
  },
  {
    "policy_name": "Enable insert for authenticated users only",
    "table_name": "submission_answers",
    "schema_name": "public",
    "is_permissive": true,
    "command": "a",
    "using_expression": null,
    "with_check_expression": "true"
  },
  {
    "policy_name": "Enable read access for all users",
    "table_name": "submission_answers",
    "schema_name": "public",
    "is_permissive": true,
    "command": "r",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "policy_name": "Policy with table joins",
    "table_name": "submission_answers",
    "schema_name": "public",
    "is_permissive": true,
    "command": "w",
    "using_expression": "(( SELECT auth.uid() AS uid) IN ( SELECT members.user_id\n   FROM members\n  WHERE (members.team_id = submission_answers.id)))",
    "with_check_expression": null
  }
]